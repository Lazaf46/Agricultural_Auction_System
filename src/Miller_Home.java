
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Fazal
 */
public class Miller_Home extends javax.swing.JFrame {
    
   static Connection conn;
   Timer timer;
   public static int sec;
   //Get the max amount bidded values from the bid table
   String itemName;
   String bidder;
   int bid;
   Farmer_Home fHome = new Farmer_Home();

    /**
     * Creates new form Miller_Home
     */
    public Miller_Home() {
        initComponents();
        dbConn();
        listAuctionProduct();
        
        sec = fHome.Sec;
        startTimer();
        timer.start();
    }
    public void dbConn(){
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/auction?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "roott");
          //  System.out.println("Driver LOad successfully");
        } catch (Exception e) {
           // System.out.println("Error");
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_bidderName = new javax.swing.JTextField();
        txt_bidPrice = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_listAuctionedProducts = new javax.swing.JTable();
        btn_addBid = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_biddedData = new javax.swing.JTable();
        lbl_timer = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_itemName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Miller Buy Panel");

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 24)); // NOI18N
        jLabel6.setText("TIMER : ");

        jLabel2.setText("Bidder Name : ");

        jLabel3.setText("Bid Price : ");

        tbl_listAuctionedProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Image", "Owner Name", "Item Name", "Quantity", "Reserverd Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_listAuctionedProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_listAuctionedProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_listAuctionedProducts);

        btn_addBid.setText("Add BID");
        btn_addBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addBidActionPerformed(evt);
            }
        });

        tbl_biddedData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bidder Name", "Bid Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbl_biddedData);

        jLabel4.setText("Item Name :");

        txt_itemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_itemNameActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(lbl_timer)
                .addGap(61, 61, 61))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_bidPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_bidderName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(btn_addBid)))
                .addGap(112, 112, 112)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136)
                .addComponent(jButton1)
                .addGap(42, 42, 42)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(lbl_timer))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_itemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_bidderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_bidPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addComponent(btn_addBid))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(242, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(362, 362, 362))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addBidActionPerformed
        // TODO add your handling code here:
        
           if(txt_bidderName.getText().equals("")||txt_bidPrice.getText().equals("")||txt_itemName.getText().equals("")){
               JOptionPane.showMessageDialog(null, "Please Fill the the text box", "error", 1);
           }
           else{
               String iName = txt_itemName.getText();
               String bName = txt_bidderName.getText();
               String bPrice = txt_bidPrice.getText();
               try {
                   Statement stmt = conn.createStatement();
              String insertQ = "INSERT INTO bid values('"+iName+"', '"+bName+"', '"+bPrice+"')";
           stmt.execute(insertQ);
           stmt.close();
           JOptionPane.showMessageDialog(null, "Bid Added", "Add Bid", 2);
           
           bidTableData();
           
           txt_itemName.setText("");
           txt_bidderName.setText("");
           txt_bidPrice.setText("");
       }catch (SQLException ex) {
           Logger.getLogger(Miller_Home.class.getName()).log(Level.SEVERE, null, ex);
       }   
           }
          
        
        
    }//GEN-LAST:event_btn_addBidActionPerformed

    private void tbl_listAuctionedProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_listAuctionedProductsMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tm = (DefaultTableModel) tbl_listAuctionedProducts.getModel();
        int row = tbl_listAuctionedProducts.getSelectedRow();
        
        String iName = (String) tm.getValueAt(row, 2);
        
        txt_itemName.setText(iName);
    }//GEN-LAST:event_tbl_listAuctionedProductsMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Miller_Option().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Main_Login().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_itemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_itemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_itemNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Miller_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Miller_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Miller_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Miller_Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Miller_Home().setVisible(true);
            }
        });
        
         
    }
     public void listAuctionProduct(){
        //Retreving data from db = faddProduct
       DefaultTableModel tm = (DefaultTableModel) tbl_listAuctionedProducts.getModel();
        
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT OwnerName, ItemNAME, Quantity, ReservedPrice from auctioned_item");
            while(rs.next()){
               // Blob img = rs.getBlob("Image");
                String oName = rs.getString("OwnerName");
                String iName = rs.getString("ItemName");
                String quan = rs.getString("Quantity");
                String rPrice = rs.getString("ReservedPrice");
                
                tm.addRow(new Object[]{"", oName,iName, quan, rPrice });
            }
        } catch (SQLException ex) {
            Logger.getLogger(Farmer_Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
     
     public void startTimer(){
         timer = new Timer(1000, new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
                   if(sec==60) lbl_timer.setText("AUCTION NOT STARTED!!");
                   else sec--;
                   
                   if(sec==-1){
                       timer.stop();
                       
                       try {
                           Statement stmt = conn.createStatement();
                           //Extracting the max bidded price from the table
                           String selectMaxAmount = "SELECT * FROM bid WHERE BidPrice = (SELECT MAX(BidPrice)FROM BID)";
                           ResultSet rs = stmt.executeQuery(selectMaxAmount);
                           while(rs.next()){
                               //Setting the extracted dta
                               itemName = rs.getString(1);
                               bidder = rs.getString(2);
                               bid = rs.getInt(3);
                           }
                           //Now update the faddedProduct tbl with these value
                           String updateQ = "UPDATE fAddProduct SET Winner_Name = '"+bidder+"' , SoldPrice = '"+bid+"' WHERE ItemName = '"+itemName+"' ";
                           
                           //Now delete * thedata from the bid tbl
                           String deleteQ = "DELETE FROM BID";
                           stmt.executeUpdate(updateQ);
                           stmt.executeUpdate(deleteQ);
                           
                           JOptionPane.showMessageDialog(null,"ITEM "+ itemName+ " SOLD TO "+bidder+ " AT "+bid+"", "Item Sold", 1);
                           //Deleting the data frm the table in UI
                           tbl_biddedData.setModel(new DefaultTableModel());
                           //Deleting the SOLD ITEM from databse
                           String deleteSoldItem = "DELETE FROM auctioned_item WHERE ItemName = '"+itemName+"'";
                           stmt.executeUpdate(deleteSoldItem);
                           
                           //Getting the details from fAddedProduct to store in Miller_bought_Product - becas miller should see what he buy.
                           //I'm getting the details frm fAddedProduct becas it has the updated data
                           String millerBoughtProducts = "INSERT INTO miller_bought_product (ItemImage, OwnerName, ItemName, Quantity, BoughtPrice)"
                           + "SELECT Image, Winner_Name, ItemName, Quantity, SoldPrice FROM faddproduct";
                            stmt.executeUpdate(millerBoughtProducts);
                           // stmt.close();
                           
                           
                           
                       } catch (SQLException ex) {
                           Logger.getLogger(Miller_Home.class.getName()).log(Level.SEVERE, null, ex);
                       }
                    
                   }
                   else if(sec>=0&&sec<10)lbl_timer.setText("00:0"+sec);
                   else if (sec>10&&sec<60) lbl_timer.setText("00:"+sec);
                   
                   
             }
         });
     }
   

     
     public void bidTableData(){
         DefaultTableModel tm = (DefaultTableModel) tbl_biddedData.getModel();
         
       try {
           Statement stmt = conn.createStatement();
           ResultSet rs = stmt.executeQuery("SELECT BidderName, BidPrice FROM BID");
           while(rs.next()){
               String bName = rs.getString("BidderName");
               int bPrice = rs.getInt("BidPrice");
               
               tm.addRow(new Object[]{bName,bPrice});
           }
          
           
       } catch (SQLException ex) {
           Logger.getLogger(Miller_Home.class.getName()).log(Level.SEVERE, null, ex);
       }
         
         
         
     }
     
     void millerBoughtProducts(){
         
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addBid;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_timer;
    private javax.swing.JTable tbl_biddedData;
    private javax.swing.JTable tbl_listAuctionedProducts;
    private javax.swing.JTextField txt_bidPrice;
    private javax.swing.JTextField txt_bidderName;
    private javax.swing.JTextField txt_itemName;
    // End of variables declaration//GEN-END:variables
}
