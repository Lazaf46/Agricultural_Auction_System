
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Fazal
 */
public class Agency_Logged_in extends javax.swing.JFrame {
    Connection conn;
    Timer timer;
    public static int sec;
    
    String itemName;
    String BidderName;
    int BidPrice;
    Miller_Sell mSell;
    
    

    /**
     * Creates new form Agency_Logged_in
     * @throws java.lang.ClassNotFoundException
     * @throws java.sql.SQLException
     */
    
    public Agency_Logged_in() throws ClassNotFoundException, SQLException {
        this.mSell = new Miller_Sell();
        initComponents();
        dbConn();
        getMillerAuctionedItem();
        
        sec = mSell.Sec;
        StartTimer();
        timer.start();
    }

   public final void dbConn(){
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn =(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "roott");
          
        } catch (ClassNotFoundException | SQLException e) {
           // System.out.println("Error");
        }
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_getMillerAuctionedItem = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txt_itemName = new javax.swing.JTextField();
        txt_bidderName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lbl_displayTimer = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_bidPrice = new javax.swing.JTextField();
        btn_addBid = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_bidData = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbl_getMillerAuctionedItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Image", "Owner Name", "Item Name", "Quantity", "Reserved Price"
            }
        ));
        tbl_getMillerAuctionedItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_getMillerAuctionedItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_getMillerAuctionedItem);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel7.setText("Agency Panel");

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 24)); // NOI18N
        jLabel8.setText("TIMER : ");

        jLabel1.setText("Item Name :");

        txt_itemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_itemNameActionPerformed(evt);
            }
        });

        txt_bidderName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_bidderNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Bidder Name :");

        jLabel3.setText("Bid Price :");

        txt_bidPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_bidPriceActionPerformed(evt);
            }
        });

        btn_addBid.setText("ADD BID");
        btn_addBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addBidActionPerformed(evt);
            }
        });

        tbl_bidData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bidder Name", "Bid Price"
            }
        ));
        jScrollPane2.setViewportView(tbl_bidData);

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_bidderName, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                    .addComponent(txt_itemName)
                                    .addComponent(txt_bidPrice)))
                            .addComponent(btn_addBid)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(151, 151, 151)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_displayTimer)
                        .addGap(142, 142, 142))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_displayTimer))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_itemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txt_bidderName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_bidPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(btn_addBid)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_itemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_itemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_itemNameActionPerformed

    private void txt_bidderNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_bidderNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_bidderNameActionPerformed

    private void txt_bidPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_bidPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_bidPriceActionPerformed

    private void tbl_getMillerAuctionedItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_getMillerAuctionedItemMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tm = (DefaultTableModel) tbl_getMillerAuctionedItem.getModel();
        int row = tbl_getMillerAuctionedItem.getSelectedRow();
        
        String iName= (String) tm.getValueAt(row, 2);
        txt_itemName.setText(iName);
        
    }//GEN-LAST:event_tbl_getMillerAuctionedItemMouseClicked

    private void btn_addBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addBidActionPerformed
        try {                                           
            // TODO add your handling code here:
            String iName = txt_itemName.getText();
            String bName = txt_bidderName.getText();
            String bPrice = txt_bidPrice.getText();
            
            try {
                Statement stmt = conn.createStatement();
                String insertQ = "INSERT INTO BID VALUES ('"+iName+"', '"+bName+"', '"+bPrice+"')";
                stmt.executeUpdate(insertQ);
                stmt.close();
                JOptionPane.showMessageDialog(null, "Bid Added", "Add Bid", 2);
            } catch (SQLException ex) {
                Logger.getLogger(Agency_Logged_in.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            DefaultTableModel tm = (DefaultTableModel) tbl_bidData.getModel();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT BidderName, BidPrice FROM BID");
            while(rs.next()){
                String bidName = rs.getString("BidderName");
                String bidPrice = rs.getString("BidPrice");
                
                tm.addRow(new Object[]{ bidName, bidPrice});
            }
            
            txt_itemName.setText("");
            txt_bidderName.setText("");
            txt_bidPrice.setText("");
            
                
        } catch (SQLException ex) {
            Logger.getLogger(Agency_Logged_in.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btn_addBidActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Main_Login().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agency_Logged_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agency_Logged_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agency_Logged_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agency_Logged_in.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Agency_Logged_in().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Agency_Logged_in.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Agency_Logged_in.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public final void getMillerAuctionedItem(){
        DefaultTableModel tm = (DefaultTableModel) tbl_getMillerAuctionedItem.getModel();
        
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT OwnerName, ItemNAME, Quantity, ReservedPrice from mAuctioned_Item");
            while(rs.next()){
                String oName = rs.getString("OwnerName");
                String iName = rs.getString("ItemName");
                String quan = rs.getString("Quantity");
                String resPrice = rs.getString("ReservedPrice");
                
               // tm.addRow(new Object[]{  "",oName, iName, quan, resPrice });
               tm.addRow(new Object[]{"",oName, iName, quan, resPrice });
            }
        } catch (SQLException ex) {
            Logger.getLogger(Agency_Logged_in.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addBid;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_displayTimer;
    private javax.swing.JTable tbl_bidData;
    private javax.swing.JTable tbl_getMillerAuctionedItem;
    private javax.swing.JTextField txt_bidPrice;
    private javax.swing.JTextField txt_bidderName;
    private javax.swing.JTextField txt_itemName;
    // End of variables declaration//GEN-END:variables

    private void StartTimer() {
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(sec==60) lbl_displayTimer.setText("AUCTION NOT STARTED");
                else sec--;
                
                if(sec==-1){
                    timer.stop();
                    
                    try {
                        Statement stmt = conn.createStatement();
                        //First getting the Max bidded price data
                        String SelectQ = "SELECT * FROM bid WHERE BidPrice = (SELECT MAX(BidPrice) FROM BID)";
                        ResultSet rs = stmt.executeQuery(SelectQ);
                        while (rs.next()){
                            itemName = rs.getString(1);
                            BidderName = rs.getString(2);
                            BidPrice = rs.getInt(3);
                        }
                        
                        //Now Update the tbl_millerBoughtItem Winner Name and SoldPrice
                        String updateQ = "UPDATE Miller_bought_product SET Winner_Name='"+BidderName+"', SoldPrice='"+BidPrice+"' WHERE itemName= '"+itemName+"' ";
                        stmt.executeUpdate(updateQ);
                        
                        //Now delete the bid tbl
                        String deleteQ = "DELETE FROM BID";
                        stmt.executeUpdate(deleteQ);
                        
                        JOptionPane.showMessageDialog(null, "Item " +itemName + " Sold to " +BidderName + " At " +BidPrice + "" , "Item Sold", 1);
                        
                        //DELETE THE SOLD ITEM FROM db
                        String deleteSoldItem = "DELETE FROM mAuctioned_item where ItemName = '"+itemName+"' ";
                        stmt.executeUpdate(deleteSoldItem);
                        
                        //DELETE THE BID tbl in UI
                        tbl_bidData.setModel(new DefaultTableModel());
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(Agency_Logged_in.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                   
                }
                 else if(sec>=0&&sec<10) lbl_displayTimer.setText("00:0"+sec);
                 else if(sec>10&&sec<60) lbl_displayTimer.setText("00:"+sec);
            }
        });
    }
}
